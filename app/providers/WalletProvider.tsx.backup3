'use client'

import React, { createContext, useContext, useState, useEffect } from 'react'
import toast from 'react-hot-toast'
import masChainWallet, { MasChainAccount, EnergyTransaction } from '../services/maschain-wallet'

interface WalletContextType {
  isConnected: boolean
  account: MasChainAccount | null
  connectWallet: () => Promise<void>
  disconnectWallet: () => void
  isLoading: boolean
  buyEnergy: (sellerId: string, amount: number, price: number, energyAmount: number) => Promise<EnergyTransaction>
  refreshBalance: () => Promise<void>
  // Legacy user interface for backward compatibility
  user: any
}

const WalletContext = createContext<WalletContextType | undefined>(undefined)

export function WalletProvider({ children }: { children: React.ReactNode }) {
  const [isConnected, setIsConnected] = useState(false)
  const [account, setAccount] = useState<MasChainAccount | null>(null)
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    // Set up wallet event listeners
    masChainWallet.on('connect', handleWalletConnect)
    masChainWallet.on('disconnect', handleWalletDisconnect)
    masChainWallet.on('balanceChanged', handleBalanceChanged)
    masChainWallet.on('transactionComplete', handleTransactionComplete)
    masChainWallet.on('sellerNotification', handleSellerNotification)
    masChainWallet.on('sellerResponse', handleSellerResponse)

    // Check for persisted wallet connection
    initializeWalletConnection()

    return () => {
      masChainWallet.off('connect', handleWalletConnect)
      masChainWallet.off('disconnect', handleWalletDisconnect)
      masChainWallet.off('balanceChanged', handleBalanceChanged)
      masChainWallet.off('transactionComplete', handleTransactionComplete)
      masChainWallet.off('sellerNotification', handleSellerNotification)
      masChainWallet.off('sellerResponse', handleSellerResponse)
    }
  }, [])

  const initializeWalletConnection = async () => {
    try {
      // Check if there's a persisted wallet connection
      const persistedConnection = localStorage.getItem('maschain_connected')
      const persistedAddress = localStorage.getItem('maschain_address')
      
      if (persistedConnection === 'true' && persistedAddress) {
        // Restore wallet connection
        const balance = await masChainWallet.getBalance(persistedAddress)
        const restoredAccount: MasChainAccount = {
          address: persistedAddress,
          balance,
          publicKey: `0x${Math.random().toString(16).substr(2, 64)}`,
          isConnected: true
        }
        
        // Restore account in masChainWallet
        masChainWallet['account'] = restoredAccount
        
        setAccount(restoredAccount)
        setIsConnected(true)
      }
    } catch (error) {
      console.error('Failed to restore wallet connection:', error)
      // Clear invalid persisted data
      localStorage.removeItem('maschain_connected')
      localStorage.removeItem('maschain_address')
    }
  }

  const handleWalletConnect = (account: MasChainAccount) => {
    setAccount(account)
    setIsConnected(true)
    
    // Persist wallet connection
    localStorage.setItem('maschain_connected', 'true')
    localStorage.setItem('maschain_address', account.address)
    
    toast.success(`🎉 Wallet connected! Address: ${account.address.slice(0, 6)}...${account.address.slice(-4)}`)
  }

  const handleWalletDisconnect = () => {
    setAccount(null)
    setIsConnected(false)
    
    // Clear persisted wallet connection
    localStorage.removeItem('maschain_connected')
    localStorage.removeItem('maschain_address')
    
    toast.success('Wallet disconnected')
  }

  const handleBalanceChanged = (newBalance: MasChainAccount['balance']) => {
    console.log('💰 Balance changed:', newBalance)
    if (account) {
      const updatedAccount = { ...account, balance: newBalance }
      setAccount(updatedAccount)
      // Force re-render by updating state
      setIsConnected(true)
    }
  }

  const handleTransactionComplete = (transaction: EnergyTransaction) => {
    toast.success(`✅ Transaction confirmed! TxHash: ${transaction.blockHash?.slice(0, 8)}...`)
    // Refresh balance after transaction
    setTimeout(() => {
      refreshBalance()
    }, 1000)
  }

  const handleSellerNotification = (notification: any) => {
    toast(`�� ${notification.message}`, { duration: 4000 })
  }

  const handleSellerResponse = (response: any) => {
    if (response.approved) {
      toast.success(`✅ ${response.message}`)
    } else {
      toast.error(`❌ ${response.message}`)
    }
  }

  const connectWallet = async () => {
    setIsLoading(true)
    try {
      await masChainWallet.connect()
    } catch (error) {
      console.error('Wallet connection failed:', error)
      toast.error('Failed to connect wallet. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const disconnectWallet = () => {
    masChainWallet.disconnect()
  }

  const buyEnergy = async (
    sellerId: string, 
    amount: number, 
    price: number, 
    energyAmount: number
  ): Promise<EnergyTransaction> => {
    if (!account) {
      throw new Error('Wallet not connected')
    }

    toast.loading('Preparing transaction...', { id: 'energy-purchase' })

    try {
      const transaction = await masChainWallet.createEnergyTransaction({
        to: sellerId,
        amount,
        energyAmount,
        price,
        metadata: {
          energyType: 'solar',
          sellerName: 'Bob Smith',
          location: 'Selangor'
        }
      })

      toast.success('Transaction submitted!', { id: 'energy-purchase' })
      
      // Notify the seller
      await masChainWallet.notifySeller(transaction)
      
      // Simulate seller approval process
      masChainWallet.simulateSellerApproval(transaction.id, true)

      return transaction

    } catch (error: any) {
      toast.error(error.message, { id: 'energy-purchase' })
      throw error
    }
  }

  const refreshBalance = async () => {
    if (account) {
      try {
        const newBalance = await masChainWallet.getBalance(account.address)
        const updatedAccount = { ...account, balance: newBalance }
        setAccount(updatedAccount)
        // Also update the masChainWallet's account
        if (masChainWallet['account']) {
          masChainWallet['account'].balance = newBalance
        }
        toast.success('Balance refreshed!')
      } catch (error) {
        toast.error('Failed to refresh balance')
      }
    }
  }

  // Create legacy user object for backward compatibility
  const legacyUser = account ? {
    id: account.address,
    address: account.address,
    role: 'producer' as const,
    name: 'Energy Trader',
    avatar: '⚡',
    energyCredits: account.balance.EC,
    governanceTokens: account.balance.GT,
    carbonCredits: account.balance.CC
  } : null

  const value = {
    isConnected,
    account,
    connectWallet,
    disconnectWallet,
    isLoading,
    buyEnergy,
    refreshBalance,
    user: legacyUser // For backward compatibility
  }

  return (
    <WalletContext.Provider value={value}>
      {children}
    </WalletContext.Provider>
  )
}

export function useWallet() {
  const context = useContext(WalletContext)
  if (context === undefined) {
    throw new Error('useWallet must be used within a WalletProvider')
  }
  return context
}
